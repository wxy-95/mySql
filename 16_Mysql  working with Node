                                                                            *创建文档：app.js
root@goorm:/workspace/mysql# node -v
v10.16.3

console.log('hello, world!');
root@goorm:/workspace/mysql# node app.js
hello, world!

                                                                            *NodeJavascript is a language share the same syntax with Javascript. 
                                                                             But it can run at the background (work as service).    
for(var i=0; i < 500; i++){
	console.log('hello, world');
}

                                                                            *输出任意的人名，地名，时间......
                                                                            Find Faker Docs Here: https://github.com/marak/Faker.js/
npm intall faker
var faker = require('faker');                                               *下载 faker pakeage

console.log(faker.internet.email());                                        *fake 邮箱

console.log(faker.date.past());                                             *fake 过去的时间

console.log(faker.address.city());                                          *fake 城市

function generateAdress (){                                                 *定义generateAdress 函数，并且运行此函数
	console.log(faker.address.streetName());
	console.log(faker.address.city());
	console.log(faker.address.state());
}
generateAdress();
　
 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
					                                   *Every language has his own way talk to Mysql through Mysql-package
									   
		*connect the NodeJavascript with Mysql 思路：创建‘mysql package’，然后在NodeJavascript中通过query 与‘mysql package’ 连接
	                                                                   
									   *STEP 1:creat mysql package
root@goorm:/workspace/mysql# npm init -y                                    会自动生成package.json(name is ‘mysql’）导致我们不能直接创建‘mysql package’
                                                                            解决方法：打开package.json 的名字改成‘mysql1’
root@goorm:/workspace/mysql# npm install mysql				    之后再创建‘mysql package’
									 
                                                                           *STEP 2:connect to mysql package
var mysql = require('mysql');                                               在NodeJavascript 运行此query，创建与‘mysql package’的联系

var connection = mysql.createConnection({
	host       : 'localhost',
	user       : 'root',
	database   : 'join_us' （自定义的database 名字）
});

                                                                           *STEP 3: using the mysql node package
var q = 'SELECT CURTIME() as time, CURDATE() as date, NOW() as now';        在NodeJavascript 输出现在的时刻，日期，时间
connection.query(q, function(error, results, fields){                       等于SELECT CURTIME() as time, CURDATE() as date, NOW() as now;
	if (error) throw error;
	console.log(results[0].time);
	console.log(results[0].date);
	console.log(results[0].now);
});
connection.end();
                  
CREATE TABLE users(                                                       *第一步：在mysql 里创建表格 （join_us database）
    email VARCHAR(255) PRIMARY KEY,
    created_at TIMESTAMP DEFAULT NOW()
);
INSERT INTO users (email) 
VALUES('Katie34@yahoo.com'), ('Tunde@gmail.com');

var mysql = require('mysql');                                             *第二步：在Nodejs 中创建联系

var connection = mysql.createConnection({ 
	host       : 'localhost',
	user       : 'root',
	database   : 'join_us'
});

var q = 'SELECT * FROM users';                                             *SELECT DATA
connection.query(q, function(errors, results, fields){
	if (errors) throw error;
	console.log(results[1].email);
});
connection.end();

var q = 'SELECT COUNT(*) as total FROM users';                             *SELECT DATA 2 
connection.query(q, function(errors, results, fields){
	if (errors) throw error;
	console.log(results[0].total);
});
connection.end();

var q = 'INSERT INTO users (email) VALUES ("xiangyan@yahoo.co.jp")';               *INSERT DATA 1
connection.query(q, function(error, results, fields){
	if (error) throw error;
	console.log(results);
});
connection.end();

var person = {                                                                      *INSERT DATA 2
    	        email: 'jenny98@gmail.com'
	     };
connection.query('INSERT INTO users SET ?', person, function(error, result) {
  if (error) throw error;
  console.log(result);
});
connection.end();

var person = {                                                                      *INSERT DATA 3(randomly)
	email : faker.internet.email(),
	created_at : faker.date.past()
};
connection.query('INSERT INTO users SET ?', person, function(error, result) {
	if (error) throw error;
	console.log(result);
});
connection.end();

var data=[                                                                          *INSERT DATA 4
	['xiangyan@djhf.com']
];
var q = 'INSERT INTO users (email) VALUES ?';
connection.query(q, [data], function(err, result){
	console.log(err);
	console.log(result);
});
connection.end();

var data = [];                                                                    *show 500 random data
for(var i=0; i<500; i++){
	data.push([
	faker.internet.email(),
	faker.date.past()
	]);
}
console.log(data);



var data = [];                                                                   *INSERT 500 random data
for(var i=0; i<500; i++){
	data.push([
	faker.internet.email(),
	faker.date.past()
	]);
}
var q = 'INSERT INTO users (email, created_at) VALUES ?';
connection.query(q, [data], function(err, result){
	console.log(err);
	console.log(result);
});
connection.end();

DELETE FROM users;                                                              *删除users 全部数据
