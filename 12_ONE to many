CREATE TABLE customers(                                                                                
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE order2(
        id INT AUTO_INCREMENT PRIMARY KEY,
        order_time DATE,
        amount DECIMAL(8,2),
        customer_id INT,
        FOREIGN KEY(customer_id) REFERENCES customers(id)                                                  *FOREIGN KEY(customer_id) REFERENCES customers(id) 
        //ON DELETE CASCADE                                                                                *//ON DELETE CASCADE  主函数数据删除，foreign 数据也会删除
);

SELECT * FROM  orders WHERE customer_id = (SELECT id FROM customers WHERE last_name = 'George');

                                                                                                                    
SELECT first_name, last_name, order_time, amount FROM customers                                             *explicit inner join ，inner可以省略
JOIN orders 
ON customers.id = orders.customer_id;

SELECT first_name, last_name, order_time, amount FROM orders                                                 *explicit inner join
JOIN customers 
ON customers.id = orders.customer_id;

SELECT first_name, last_name, order_time, amount                                                             *implicit inner join  
FROM customers, orders
WHERE customers.id = orders.customer_id;

SELECT * FROM customers JOIN orders ON customers.id = orders.id;                                             *meaningless data

SELECT 
first_name, 
last_name, 
SUM(amount) AS total_amount
FROM orders 
JOIN customers 
ON customers.id = orders.customer_id 
GROUP BY customers.id                                                                                        *同一个customer 会合并 
ORDER BY SUM(amount) DESC;
+------------+-----------+--------------+                                                                    *选出消费最高customer
| first_name | last_name | total_amount |
+------------+-----------+--------------+
| George     | Michael   |       813.17 |
| Bette      | Davis     |       450.25 |
| Boy        | George    |       135.49 |
+------------+-----------+--------------+

SELECT *
FROM customers
LEFT JOIN orders                                                                                               *left join
ON customers.id = orders.customer_id;
+----+------------+-----------+------------------+------+------------+--------+-------------+
| id | first_name | last_name | email            | id   | order_time | amount | customer_id |
+----+------------+-----------+------------------+------+------------+--------+-------------+
|  1 | Boy        | George    | george@gmail.com |    1 | 2016-02-10 |  99.99 |           1 |
|  1 | Boy        | George    | george@gmail.com |    2 | 2017-11-11 |  35.50 |           1 |
|  2 | George     | Michael   | gm@gmail.com     |    3 | 2014-12-12 | 800.67 |           2 |
|  2 | George     | Michael   | gm@gmail.com     |    4 | 2015-01-03 |  12.50 |           2 |
|  5 | Bette      | Davis     | bette@aol.com    |    5 | 1999-04-11 | 450.25 |           5 |
|  3 | David      | Bowie     | david@gmail.com  | NULL | NULL       |   NULL |        NULL |
|  4 | Blue       | Steele    | blue@gmail.com   | NULL | NULL       |   NULL |        NULL |
+----+------------+-----------+------------------+------+------------+--------+-------------+

SELECT *
FROM orders
LEFT JOIN customers
ON customers.id = orders.customer_id;
+----+------------+--------+-------------+------+------------+-----------+------------------+
| id | order_time | amount | customer_id | id   | first_name | last_name | email            |
+----+------------+--------+-------------+------+------------+-----------+------------------+
|  1 | 2016-02-10 |  99.99 |           1 |    1 | Boy        | George    | george@gmail.com |
|  2 | 2017-11-11 |  35.50 |           1 |    1 | Boy        | George    | george@gmail.com |
|  3 | 2014-12-12 | 800.67 |           2 |    2 | George     | Michael   | gm@gmail.com     |
|  4 | 2015-01-03 |  12.50 |           2 |    2 | George     | Michael   | gm@gmail.com     |
|  5 | 1999-04-11 | 450.25 |           5 |    5 | Bette      | Davis     | bette@aol.com    |
+----+------------+--------+-------------+------+------------+-----------+------------------+

SELECT first_name, last_name, 
IFNULL(SUM(amount), 0) AS total_amount                                                                        *IFNULL(SUM(amount), 0) AS total_amount   
FROM customers
LEFT JOIN orders
ON customers.id = orders.customer_id
GROUP BY customers.id
ORDER BY sum(amount);
+------------+-----------+--------------+
| first_name | last_name | total_amount |
+------------+-----------+--------------+
| Blue       | Steele    |         0.00 |                                                                     *left join与 inner join 区别
| David      | Bowie     |         0.00 |                                                                     *left join 可以显示出order 为0 的customer
| Boy        | George    |       135.49 |
| Bette      | Davis     |       450.25 |
| George     | Michael   |       813.17 |
+------------+-----------+--------------+

SELECT * FROM customers                                                                                        *right join = inner join in this case，因为不存在没有顾客的订单
JOIN orders
    ON customers.id = orders.customer_id;
    
SELECT * FROM customers
RIGHR JOIN orders
    ON customers.id = orders.customer_id;


Practice 
SELECT first_name, 
       Ifnull(Avg(grade), 0) AS average, 
       CASE 
         WHEN Avg(grade) IS NULL THEN 'FAILING' 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　*case 的情况下用 Avg(grade)
         WHEN Avg(grade) >= 75 THEN 'PASSING' 
         ELSE 'FAILING' 
       end                   AS passing_status 
FROM   students 
       LEFT JOIN papers 
              ON students.id = papers.student_id 
GROUP  BY students.id 
ORDER  BY average DESC;                                                                                           *order 的情况下用 average 或者 Avg(grade)，都可
