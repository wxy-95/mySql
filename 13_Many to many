CREATE TABLE reviewers(
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100)
);

CREATE TABLE series(
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    released_year YEAR(4),
    genre VARCHAR(100)
);

CREATE TABLE reviwes(
    id INT AUTO_INCREMENT PRIMARY KEY,
    rating DECIMAL(2,1),
    reviewers_id INT,
    series_id INT,
    FOREIGN KEY(reviewers_id) REFERENCES reviewers(id),
    FOREIGN KEY(series_id) REFERENCES series(id)
);

SELECT title, rating 
FROM series 
JOIN reviwes 
    ON series.id=reviwes.series_id;
    
SELECT first_name, 
last_name, rating
FROM reviewers 
JOIN reviwes 
    ON reviewers.id=reviwes.reviewers_id;
    
SELECT title AS unreviewed_series 
FROM series 
LEFT JOIN reviwes 
  ON series.id=reviwes.series_id
WHERE rating is NULL;                                                                         * or reviwes.rating

SELECT genre, 
       ROUND(AVG(rating), 2) AS avg_rating
FROM reviwes 
      JOIN series 
            ON series.id = reviwes.series_id
GROUP BY series.genre;

SELECT first_name, 
      last_name, COUNT(*) AS COUNT, 
      IFNULL(MIN(rating), 0)AS MIN, 
      IFNULL(MAX(rating), 0) AS MAX, 
      IFNULL(AVG(rating), 0) AS AVG,
CASE                                                                                           * IF(AVG(rating) is NULL, 'INACTIVE', 'ACTIVE') AS STATUS
    WHEN AVG(rating) is NULL THEN 'INACTIVE'                                                     IF(Count(rating) > 0, 'ACTIVE', 'INACTIVE') AS STATUS 
    ELSE 'ACTIVE'                                                                                可根据count 的数量（评价数量）来区分 用户活跃度
    END AS 'STATUS'
FROM reviewers LEFT JOIN reviwes 
ON reviewers.id = reviwes.reviewers_id
GROUP BY reviewers.first_name
ORDER BY STATUS;

SELECT title, rating, CONCAT(first_name, ' ', last_name) AS name 
FROM reviwes
JOIN reviewers
    ON reviewers.id = reviwes.reviewers_id
JOIN series
    ON series.id = reviwes.series_id
ORDER BY title;
